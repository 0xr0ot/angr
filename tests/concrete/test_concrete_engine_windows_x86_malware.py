'''

PACKED WITH UPX

'''

import angr
import avatar2 as avatar2
import claripy

from angr_targets import AvatarGDBConcreteTarget

MALWARE_PATH = "/home/r0rshark/Documents/SharedFolder/892344.exe"
GDB_SERVER_IP = '192.168.57.3'
GDB_SERVER_PORT = 9999

UNPACKING_FINISHED = 0x4DCC82
STARTING_DECISION_ADDRESS = 0x401988
DROPPING_MALWARE_MINER_ADDRESS = 0x401A35
DROPPING_MALWARE_LOCKY_ADDRESS = 0x4019F8
MALWARE_EXECUTION_END = 0x401AD3
FAKE_CC = 0x401A7F
VENV_DETECTED = 0x401A65

avatar_gdb = AvatarGDBConcreteTarget(avatar2.archs.x86.X86, GDB_SERVER_IP ,GDB_SERVER_PORT)

p = angr.Project(MALWARE_PATH ,load_options={'auto_load_libs': False}, concrete_target=avatar_gdb,
                translation_cache=False, support_selfmodifying_code=True, use_sim_procedures=False )

simgr = p.factory.simgr(p.factory.entry_state())


print "[0]Let the malware unpack itself"

simgr.use_technique(angr.exploration_techniques.Symbion(find=[UNPACKING_FINISHED], concretize = []))
exploration = simgr.run()
new_state = exploration.stashes['found'][0]

print "[1]Executing malware concretely until address: " + hex(STARTING_DECISION_ADDRESS)

simgr = p.factory.simgr(new_state)
simgr.use_technique(angr.exploration_techniques.Symbion(find=[STARTING_DECISION_ADDRESS], concretize = []))
exploration = simgr.run()
new_concrete_state = exploration.stashes['found'][0]

arg0 = claripy.BVS('arg0',8*32)
symbolic_buffer_address = new_concrete_state.regs.ebp-0x54
new_concrete_state.memory.store(new_concrete_state.se.eval(symbolic_buffer_address),arg0)

print "[]Concrete_state pc: " + hex(new_concrete_state.se.eval(new_concrete_state.regs.pc))

simgr = p.factory.simgr(new_concrete_state)

print "[2]Symbolically executing malware to find dropping of second stage [ address:  " + hex(DROPPING_MALWARE_MINER_ADDRESS) + " ]"

exploration = simgr.explore(find=DROPPING_MALWARE_MINER_ADDRESS, avoid=[FAKE_CC,DROPPING_MALWARE_LOCKY_ADDRESS,VENV_DETECTED] )

new_symbolic_state = exploration.stashes['found'][0]

simgr = p.factory.simgr(new_symbolic_state)

print "[3]Executing malware concretely with solution found until the end " + hex(MALWARE_EXECUTION_END)

simgr.use_technique(angr.exploration_techniques.Symbion(find=[MALWARE_EXECUTION_END], concretize = [(symbolic_buffer_address,arg0)]))
exploration = simgr.run()

print "[4]Malware execution ends, the configuration value downloaded from C&C is: " + hex(new_symbolic_state.se.eval(arg0,cast_to=int))

avatar_gdb.exit()

print "\n\n\n\n"